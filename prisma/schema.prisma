// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                @id @default(autoincrement())
  email                String             @unique
  password             String
  first_name           String?
  last_name            String?
  picture_id           Int?
  birth                String
  description          String? // to be implemented...
  posts                Post[]
  post_ratings         PostRating[]
  comment_ratings      CommentRating[]
  comments             Comment[]
  events_post_comments EventPostComment[]
  events_post_ratings  EventPostRating[]
  events_post          EventPost[]
  followers            Relationship[]     @relation("followed")
  following            Relationship[]     @relation("following")
  created_at           DateTime           @default(now())
}

model Picture {
  id      Int   @id @default(autoincrement())
  content Bytes
}

model PostImages {
  id      Int   @id @default(autoincrement())
  content Bytes
  post_id Int
  post    Post  @relation(fields: [post_id], references: [id], onDelete: Cascade)
}

model PostRating {
  id         Int               @id @default(autoincrement())
  post       Post              @relation(fields: [post_id], references: [id], onDelete: Cascade)
  post_id    Int
  author     User              @relation(fields: [author_id], references: [id], onDelete: Cascade)
  author_id  Int
  type       Rating            @default(LIKE)
  events     EventPostRating[]
  created_at DateTime          @default(now())
}

model Post {
  id         Int          @id @default(autoincrement())
  author     User         @relation(fields: [author_id], references: [id], onDelete: Cascade)
  author_id  Int
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  images     PostImages[]
  ratings    PostRating[]
  comments   Comment[]
  events     EventPost[]
  movie_imdb String
  content    String
}

model Comment {
  id         Int                @id @default(autoincrement())
  post       Post               @relation(fields: [post_id], references: [id], onDelete: Cascade)
  post_id    Int
  author     User               @relation(fields: [author_id], references: [id], onDelete: Cascade)
  author_id  Int
  comment    Comment?           @relation(fields: [comment_id], references: [id], name: "comment")
  comment_id Int?
  comments   Comment[]          @relation(name: "comment")
  ratings    CommentRating[]
  events     EventPostComment[]
  content    String
  created_at DateTime           @default(now())
  updated_at DateTime           @updatedAt
}

model CommentRating {
  id         Int      @id @default(autoincrement())
  comment    Comment  @relation(fields: [comment_id], references: [id])
  comment_id Int
  author     User     @relation(fields: [author_id], references: [id], onDelete: Cascade)
  author_id  Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model EventPostComment {
  id         Int     @id @default(autoincrement())
  user       User    @relation(fields: [show_to], references: [id])
  show_to    Int
  comment    Comment @relation(fields: [comment_id], references: [id])
  comment_id Int
}

model EventPostRating {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [show_to], references: [id])
  show_to   Int
  rating    PostRating @relation(fields: [rating_id], references: [id])
  rating_id Int
}

model EventPost {
  id      Int  @id @default(autoincrement())
  user    User @relation(fields: [show_to], references: [id])
  show_to Int
  post    Post @relation(fields: [post_id], references: [id], onDelete: Cascade)
  post_id Int
}

model Relationship {
  user_followed  User @relation(fields: [followed], references: [id], name: "followed")
  followed       Int
  user_following User @relation(fields: [following], references: [id], name: "following")
  following      Int

  @@unique([followed, following])
}

enum Rating {
  LIKE
  DISLIKE
}
